# TERRAGON Docker Compose
# Self-Evolving MoE-Router Development and Testing Environment

version: '3.8'

services:
  # TERRAGON Main Application
  terragon-app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - TERRAGON_ENV=development
      - TERRAGON_LOG_LEVEL=DEBUG
      - TERRAGON_WORKERS=2
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../:/app
      - terragon-data:/app/data
      - terragon-logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - terragon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - terragon-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=terragon
      - POSTGRES_USER=terragon
      - POSTGRES_PASSWORD=terragon_dev_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - terragon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U terragon"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-config.yaml:/etc/prometheus/prometheus.yml
      - ./monitoring/terragon-alerts.yml:/etc/prometheus/terragon-alerts.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - terragon-network
    restart: unless-stopped

  # Grafana Visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=terragon_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - terragon-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Load Balancer (nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - terragon-app
    networks:
      - terragon-network
    restart: unless-stopped

  # TERRAGON Quality Gates Runner
  quality-gates:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    command: ["quality-gates"]
    volumes:
      - ../:/app
      - terragon-data:/app/data
    networks:
      - terragon-network
    profiles:
      - tools

  # TERRAGON Research Executor
  research-executor:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    command: ["research"]
    volumes:
      - ../:/app
      - terragon-data:/app/data
    networks:
      - terragon-network
    profiles:
      - tools

volumes:
  terragon-data:
    driver: local
  terragon-logs:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  terragon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16