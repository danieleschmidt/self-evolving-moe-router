apiVersion: v1
kind: Namespace
metadata:
  name: terragon-prod
  labels:
    name: terragon-production
    version: v1.0.0
---
# TERRAGON ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: terragon-config
  namespace: terragon-prod
data:
  TERRAGON_ENV: "production"
  TERRAGON_LOG_LEVEL: "INFO"
  TERRAGON_WORKERS: "8"
  TERRAGON_MAX_WORKERS: "16"
  TERRAGON_API_RATE_LIMIT: "1000"
  TERRAGON_ENABLE_METRICS: "true"
  TERRAGON_ENABLE_TRACING: "true"
---
# TERRAGON Secrets
apiVersion: v1
kind: Secret
metadata:
  name: terragon-secrets
  namespace: terragon-prod
type: Opaque
data:
  postgres-password: dGVycmFnb25fcHJvZF9wYXNzd29yZA== # Change this!
  postgres-replication-password: cmVwbGljYXRvcl9wYXNzd29yZA== # Change this!
  terragon-secret-key: dGVycmFnb25fc3VwZXJfc2VjcmV0X2tleQ== # Change this!
  grafana-admin-password: YWRtaW5fcGFzc3dvcmQ= # Change this!
  redis-password: cmVkaXNfcGFzc3dvcmQ= # Change this!
---
# PostgreSQL Primary Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-primary
  namespace: terragon-prod
  labels:
    app: postgres-primary
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-primary
  template:
    metadata:
      labels:
        app: postgres-primary
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "terragon_prod"
        - name: POSTGRES_USER
          value: "terragon"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: postgres-password
        - name: POSTGRES_REPLICATION_MODE
          value: "master"
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: postgres-replication-password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - terragon
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - terragon
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-primary-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
---
# PostgreSQL Primary Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: terragon-prod
  labels:
    app: postgres-primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres-primary
---
# PostgreSQL Primary PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-primary-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ssd-storage
  resources:
    requests:
      storage: 100Gi
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: terragon-prod
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: redis-password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: terragon-prod
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 20Gi
---
# TERRAGON Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: terragon-app
  namespace: terragon-prod
  labels:
    app: terragon-app
    tier: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app: terragon-app
  template:
    metadata:
      labels:
        app: terragon-app
        tier: application
    spec:
      containers:
      - name: terragon
        image: terragon/self-evolving-moe:latest
        ports:
        - containerPort: 8080
          name: http
        envFrom:
        - configMapRef:
            name: terragon-config
        env:
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: POSTGRES_URL
          value: "postgresql://terragon:$(POSTGRES_PASSWORD)@postgres-primary:5432/terragon_prod"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: postgres-password
        - name: TERRAGON_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: terragon-secret-key
        volumeMounts:
        - name: terragon-models
          mountPath: /app/models
        - name: terragon-data
          mountPath: /app/data
        - name: terragon-logs
          mountPath: /app/logs
        - name: shared-memory
          mountPath: /dev/shm
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
          limits:
            memory: "16Gi"
            cpu: "8000m"
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
      volumes:
      - name: terragon-models
        persistentVolumeClaim:
          claimName: terragon-models-pvc
      - name: terragon-data
        persistentVolumeClaim:
          claimName: terragon-data-pvc
      - name: terragon-logs
        persistentVolumeClaim:
          claimName: terragon-logs-pvc
      - name: shared-memory
        emptyDir:
          medium: Memory
          sizeLimit: 2Gi
      nodeSelector:
        node-type: gpu-node
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
---
# TERRAGON Application Service
apiVersion: v1
kind: Service
metadata:
  name: terragon-app
  namespace: terragon-prod
  labels:
    app: terragon-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    name: http
  - port: 443
    targetPort: 8080
    name: https
  selector:
    app: terragon-app
---
# TERRAGON Models PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: terragon-models-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage
  resources:
    requests:
      storage: 500Gi
---
# TERRAGON Data PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: terragon-data-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage
  resources:
    requests:
      storage: 200Gi
---
# TERRAGON Logs PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: terragon-logs-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage
  resources:
    requests:
      storage: 50Gi
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: terragon-prod
  labels:
    app: prometheus
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        tier: monitoring
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=50GB'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-alerts
          mountPath: /etc/prometheus/alerts.yml
          subPath: alerts.yml
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-alerts
        configMap:
          name: prometheus-alerts
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: terragon-prod
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus
---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ssd-storage
  resources:
    requests:
      storage: 100Gi
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: terragon-prod
  labels:
    app: grafana
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        tier: monitoring
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: terragon-secrets
              key: grafana-admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_SECURITY_COOKIE_SECURE
          value: "true"
        - name: GF_SECURITY_COOKIE_SAMESITE
          value: "strict"
        - name: GF_SERVER_ROOT_URL
          value: "https://monitoring.terragon.ai"
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: terragon-prod
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana
---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
# Ingress for TERRAGON
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: terragon-ingress
  namespace: terragon-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - api.terragon.ai
    - monitoring.terragon.ai
    secretName: terragon-tls
  rules:
  - host: api.terragon.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: terragon-app
            port:
              number: 80
  - host: monitoring.terragon.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
---
# Horizontal Pod Autoscaler for TERRAGON App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: terragon-app-hpa
  namespace: terragon-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: terragon-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# Pod Disruption Budget for TERRAGON App
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: terragon-app-pdb
  namespace: terragon-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: terragon-app
---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: terragon-network-policy
  namespace: terragon-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - podSelector:
        matchLabels:
          tier: application
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  egress:
  - {}  # Allow all egress traffic
---
# Quality Gates CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: terragon-quality-gates
  namespace: terragon-prod
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: quality-gates
            image: terragon/self-evolving-moe:latest
            command:
            - python3
            - simple_quality_gates.py
            env:
            - name: TERRAGON_ENV
              value: "production"
            volumeMounts:
            - name: quality-reports
              mountPath: /app/quality-reports
          volumes:
          - name: quality-reports
            persistentVolumeClaim:
              claimName: quality-reports-pvc
          restartPolicy: OnFailure
---
# Quality Reports PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quality-reports-pvc
  namespace: terragon-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi