# TERRAGON Production Deployment Configuration
# Self-Evolving MoE-Router Production-Ready Environment

version: '3.8'

services:
  # TERRAGON Main Application - Production
  terragon-app-prod:
    image: terragon/self-evolving-moe:latest
    ports:
      - "8080:8080"
    environment:
      - TERRAGON_ENV=production
      - TERRAGON_LOG_LEVEL=INFO
      - TERRAGON_WORKERS=8
      - TERRAGON_MAX_WORKERS=16
      - REDIS_URL=redis://redis-cluster:6379
      - POSTGRES_URL=postgresql://terragon:${POSTGRES_PASSWORD}@postgres-primary:5432/terragon_prod
      - TERRAGON_SECRET_KEY=${TERRAGON_SECRET_KEY}
      - TERRAGON_API_RATE_LIMIT=1000
      - TERRAGON_ENABLE_METRICS=true
      - TERRAGON_ENABLE_TRACING=true
      - CUDA_VISIBLE_DEVICES=0,1,2,3
    volumes:
      - terragon-models:/app/models
      - terragon-data:/app/data
      - terragon-logs:/app/logs
      - /dev/shm:/dev/shm  # Shared memory for performance
    depends_on:
      - redis-cluster
      - postgres-primary
      - consul-agent
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '4.0'
          memory: 8G
      placement:
        constraints:
          - node.role == worker
          - node.labels.gpu == true
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py", "--production"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Load Balancer - Production Grade
  nginx-prod:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - terragon-app-prod
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Redis Cluster for High Availability
  redis-cluster:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-cluster-data:/data
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
    networks:
      - terragon-prod-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # PostgreSQL Primary (Master)
  postgres-primary:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=terragon_prod
      - POSTGRES_USER=terragon
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_MODE=master
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./init-db-prod.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./postgresql-prod.conf:/etc/postgresql/postgresql.conf
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
      placement:
        constraints:
          - node.role == worker
          - node.labels.storage == ssd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U terragon"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # PostgreSQL Replica (Slave)
  postgres-replica:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRES_MASTER_SERVICE=postgres-primary
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U replicator"]
      interval: 15s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Prometheus Monitoring - Production
  prometheus-prod:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-prod-config.yaml:/etc/prometheus/prometheus.yml
      - ./monitoring/terragon-prod-alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-prod-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.notification-queue-capacity=10000'
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      placement:
        constraints:
          - node.role == worker
          - node.labels.monitoring == true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # AlertManager for Production Alerts
  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager-config.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Grafana - Production Dashboard
  grafana-prod:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SERVER_ROOT_URL=https://monitoring.terragon.ai
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres-primary:5432
      - GF_DATABASE_NAME=grafana_prod
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    volumes:
      - grafana-prod-data:/var/lib/grafana
      - ./monitoring/grafana-prod-dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana-prod-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-prod-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    networks:
      - terragon-prod-network
    restart: unless-stopped
    depends_on:
      - prometheus-prod
      - postgres-primary
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Consul for Service Discovery
  consul-agent:
    image: consul:1.16.1
    ports:
      - "8500:8500"
    volumes:
      - consul-data:/consul/data
      - ./consul-config.json:/consul/config/config.json
    command: >
      consul agent
      -server
      -bootstrap-expect=1
      -data-dir=/consul/data
      -config-dir=/consul/config
      -ui
      -client=0.0.0.0
      -bind=0.0.0.0
      -retry-join=consul-agent
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    ports:
      - "14268:14268"
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Elasticsearch for Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
      placement:
        constraints:
          - node.role == worker
          - node.labels.storage == ssd
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Backup Service
  backup-service:
    image: terragon/backup-service:latest
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${BACKUP_AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${BACKUP_AWS_SECRET_KEY}
      - POSTGRES_URL=postgresql://terragon:${POSTGRES_PASSWORD}@postgres-primary:5432/terragon_prod
    volumes:
      - terragon-models:/backup/models:ro
      - terragon-data:/backup/data:ro
      - postgres-primary-data:/backup/postgres:ro
    depends_on:
      - postgres-primary
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.role == worker
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

  # Security Scanner (Periodic)
  security-scanner:
    image: terragon/security-scanner:latest
    environment:
      - SCAN_SCHEDULE=0 1 * * 0  # Weekly on Sunday at 1 AM
      - ALERT_WEBHOOK_URL=${SECURITY_ALERT_WEBHOOK}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - security-scan-results:/scan-results
    networks:
      - terragon-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"

volumes:
  terragon-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/terragon/models
  terragon-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/terragon/data
  terragon-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/terragon/logs
  redis-cluster-data:
    driver: local
  postgres-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/postgres/primary
  postgres-replica-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/postgres/replica
  prometheus-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/prometheus
  grafana-prod-data:
    driver: local
  alertmanager-data:
    driver: local
  consul-data:
    driver: local
  elasticsearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/storage/elasticsearch
  security-scan-results:
    driver: local

networks:
  terragon-prod-network:
    driver: overlay
    ipam:
      config:
        - subnet: 10.0.0.0/16
    attachable: true

# Docker Swarm configuration
x-deploy-common: &deploy-common
  mode: replicated
  update_config:
    parallelism: 1
    delay: 30s
    failure_action: rollback
    order: start-first
  rollback_config:
    parallelism: 1
    delay: 30s
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3