# Automated Release Workflow
# This file should be manually copied to .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Validate Release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            if [[ $VERSION =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if version exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "❌ Version v$VERSION already exists"
            exit 1
          fi
          echo "✅ Version v$VERSION is new"

      - name: Validate changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ -f CHANGELOG.md ]; then
            if grep -q "## \[$VERSION\]" CHANGELOG.md; then
              echo "✅ Changelog entry found for version $VERSION"
            else
              echo "❌ No changelog entry found for version $VERSION"
              exit 1
            fi
          else
            echo "⚠️  No CHANGELOG.md file found"
          fi

  # Run Full Test Suite
  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,benchmark]"

      - name: Run comprehensive tests
        run: |
          pytest tests/ -v --cov=self_evolving_moe --cov-report=xml

      - name: Test package build
        run: |
          python -m build
          twine check dist/*

  # Build Release Artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          
      - name: Build package
        run: |
          python -m build
          ls -la dist/
          
      - name: Verify package
        run: |
          twine check dist/*
          pip install dist/*.whl
          python -c "import self_evolving_moe; print(f'Version: {self_evolving_moe.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-artifacts
          path: dist/

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            terragon/self-evolving-moe-router
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}

  # Generate Release Notes
  generate-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract changelog section for this version
          if [ -f CHANGELOG.md ]; then
            NOTES=$(awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          else
            NOTES="Release $VERSION"
          fi
          
          # Add contributors
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CONTRIBUTORS=$(git shortlog -sn $PREVIOUS_TAG..HEAD | head -10 | awk '{$1=""; print "* " $0}' | sed 's/^ *//')
            NOTES="$NOTES

## Contributors
$CONTRIBUTORS"
          fi
          
          # Add commit summary
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..HEAD)
            NOTES="$NOTES

## Changes
* $COMMIT_COUNT commits since $PREVIOUS_TAG
* [Full Changelog](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...v$VERSION)"
          fi
          
          # Save to output
          {
            echo 'release_notes<<EOF'
            echo "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-artifacts, build-docker, generate-notes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-artifacts
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-notes.outputs.release_notes }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            dist/*
          generate_release_notes: true
          make_latest: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-artifacts, create-release]
    environment: 
      name: pypi
      url: https://pypi.org/p/self-evolving-moe-router
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-artifacts
          path: dist/

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.is_prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: needs.validate-release.outputs.is_prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          cname: docs.moe-router.com

  # Post-Release Actions
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    if: always() && (needs.create-release.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create next development version
        if: needs.validate-release.outputs.is_prerelease == 'false'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Increment patch version for next development
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-dev"
          
          # Update pyproject.toml
          sed -i "s/version = \"$VERSION\"/version = \"$NEXT_VERSION\"/" pyproject.toml
          
          # Add changelog entry
          if [ -f CHANGELOG.md ]; then
            sed -i "1a\\## [Unreleased]\\n\\n### Added\\n\\n### Changed\\n\\n### Fixed\\n" CHANGELOG.md
          fi

      - name: Commit version bump
        if: needs.validate-release.outputs.is_prerelease == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore: bump version to next development version" || exit 0
          git push

      - name: Create discussion for release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: 'v${{ needs.validate-release.outputs.version }}'
            });
            
            github.rest.teams.addOrUpdateRepoPermissionsInOrg({
              org: context.repo.owner,
              team_slug: 'releases',
              owner: context.repo.owner,
              repo: context.repo.repo,
              permission: 'push'
            });

  # Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi]
    if: always() && (needs.create-release.result == 'success')
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              text: "🚀 New Release: v${{ needs.validate-release.outputs.version }}",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Version',
                  value: 'v${{ needs.validate-release.outputs.version }}',
                  short: true
                }, {
                  title: 'Type',
                  value: '${{ needs.validate-release.outputs.is_prerelease == "true" && "Pre-release" || "Stable Release" }}',
                  short: true
                }, {
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                }, {
                  title: 'Release Notes',
                  value: 'https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}',
                  short: true
                }]
              }]
            }

      - name: Notify Discord
        if: secrets.DISCORD_WEBHOOK
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🎉 **New Release Available!** 
            
            **Version**: v${{ needs.validate-release.outputs.version }}
            **Repository**: ${{ github.repository }}
            **Release Notes**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}
            
            Install with: `pip install self-evolving-moe-router==${{ needs.validate-release.outputs.version }}`