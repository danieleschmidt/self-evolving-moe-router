# Comprehensive Security Scanning Workflow
# This file should be manually copied to .github/workflows/security.yml

name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
          safety check --short-report

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --format=cyclonedx-json --output=sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Static Application Security Testing (SAST)
  sast:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/django
            p/flask
            p/r2c-security-audit

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Container Security Scanning
  container-scan:
    name: Container Security
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'container-scan')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t moe-router:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'moe-router:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk Container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: moe-router:test
          args: --severity-threshold=high

  # Supply Chain Security
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install cyclonedx-bom
        run: pip install cyclonedx-bom

      - name: Generate SBOM
        run: |
          cyclonedx-py --format json --output sbom-cyclonedx.json .

      - name: Run SLSA verification
        uses: slsa-framework/slsa-verifier/actions/installer@v2.4.1

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-cyclonedx
          path: sbom-cyclonedx.json

  # License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=plain-vertical

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  # Infrastructure as Code Security
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # Security Policy Enforcement
  policy-check:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "❌ SECURITY.md file is missing"
            exit 1
          else
            echo "✅ SECURITY.md file exists"
          fi

      - name: Validate security policy content
        run: |
          if grep -q "security@" SECURITY.md; then
            echo "✅ Security contact found in SECURITY.md"
          else
            echo "❌ Security contact missing in SECURITY.md"
            exit 1
          fi

  # Compliance and Reporting
  compliance-report:
    name: Security Compliance Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, sast, codeql, container-scan, supply-chain, license-check, iac-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate compliance report
        run: |
          cat > security-compliance-report.md << 'EOF'
          # Security Compliance Report
          
          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Repository**: ${{ github.repository }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.head_ref || github.ref_name }}
          
          ## Security Scan Results
          
          ### ✅ Completed Scans
          - Secret Detection (TruffleHog, GitLeaks)
          - Dependency Vulnerability Scanning (Safety, pip-audit)
          - Static Application Security Testing (Bandit, Semgrep)
          - Code Quality Analysis (CodeQL)
          - Container Security (Trivy, Snyk)
          - Supply Chain Security (SBOM, SLSA)
          - License Compliance
          - Infrastructure as Code Security (Checkov)
          
          ### 📊 Summary
          - **High Severity Issues**: $(find . -name "*report*" -type f -exec grep -l "high\|critical" {} \; | wc -l)
          - **Medium Severity Issues**: $(find . -name "*report*" -type f -exec grep -l "medium" {} \; | wc -l)
          - **Low Severity Issues**: $(find . -name "*report*" -type f -exec grep -l "low" {} \; | wc -l)
          
          ### 🔗 Artifact Links
          - [SBOM](./sbom/)
          - [Dependency Reports](./dependency-reports/)
          - [Bandit Report](./bandit-report/)
          - [License Report](./license-report/)
          
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-report
          path: security-compliance-report.md

      - name: Comment compliance report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-compliance-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Compliance Report\n\n${report}`
            });

  # Security Notifications
  notify-security:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, sast, codeql, container-scan]
    if: failure()
    steps:
      - name: Notify security team on critical issues
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "🚨 Critical Security Issues Detected",
              attachments: [{
                color: 'danger',
                fields: [{
                  title: 'Repository',
                  value: '${{ github.repository }}',
                  short: true
                }, {
                  title: 'Branch',
                  value: '${{ github.head_ref || github.ref_name }}',
                  short: true
                }, {
                  title: 'Commit',
                  value: '${{ github.sha }}',
                  short: true
                }, {
                  title: 'Action',
                  value: '${{ github.workflow }}',
                  short: true
                }]
              }]
            }