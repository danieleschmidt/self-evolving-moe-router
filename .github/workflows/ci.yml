# Continuous Integration workflow for Self-Evolving MoE-Router
# Runs comprehensive quality gates, tests, and deployment checks

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, "terragon/*" ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Quality Gates - Core validation
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libblas-dev liblapack-dev gfortran
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    
    - name: Run quality gates
      run: |
        python scripts/run_quality_gates.py --skip-optional --report quality-gates-report.json
    
    - name: Upload quality gates report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: quality-gates-report-${{ matrix.python-version }}
        path: quality-gates-report.json
        retention-days: 30
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
        retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
        retention-days: 30

  # Performance benchmarking
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    
    - name: Run performance tests
      run: |
        python -m pytest tests/test_performance_scalability.py -v --tb=short --maxfail=3
    
    - name: Run benchmark suite
      run: |
        python -c "
        from src.self_evolving_moe.cli import main as cli_main
        import sys
        sys.argv = ['cli', 'benchmark', '--num-experts', '8', '--expert-dim', '64', '--batch-size', '16']
        cli_main()
        " || echo "Benchmark completed with warnings"
    
    - name: Upload performance results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          outputs/
          benchmark_results.json
          efficiency_report.json
        retention-days: 7

  # Docker build and test
  docker-tests:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build production Docker image
      run: |
        docker build -f docker/Dockerfile.production -t moe-router:test .
    
    - name: Test Docker container health
      run: |
        # Start container
        docker run -d --name moe-test -p 8000:8000 moe-router:test
        
        # Wait for startup
        sleep 30
        
        # Run health check
        docker exec moe-test python /app/healthcheck.py --quick
        
        # Test API endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Cleanup
        docker stop moe-test
        docker rm moe-test
    
    - name: Test Docker Compose
      run: |
        # Start services
        docker-compose -f docker-compose.production.yml up -d --build
        
        # Wait for services
        sleep 60
        
        # Test services
        curl -f http://localhost:80/health || exit 1
        curl -f http://localhost:9091/api/v1/targets || exit 1
        
        # Cleanup
        docker-compose -f docker-compose.production.yml down

  # Integration tests
  integration-tests:  
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install psycopg2-binary redis
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Test end-to-end workflow
      run: |
        python examples/basic_evolution.py

  # Documentation build
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -e .
    
    - name: Build documentation
      run: |
        cd docs/
        make html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 30

  # Release preparation
  release-check:
    name: Release Readiness
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, performance-tests, docker-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import self_evolving_moe; print('Package import successful')"
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 30

  # Deployment staging
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, docker-tests]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This would deploy to staging infrastructure"
        echo "Environment: staging"
        echo "Commit: ${{ github.sha }}"
    
    - name: Run staging tests
      run: |
        echo "ðŸ§ª Running staging validation tests..."
        echo "This would run post-deployment tests"

  # Production deployment
  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [release-check]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "This would deploy to production infrastructure"
        echo "Environment: production"
        echo "Commit: ${{ github.sha }}"
        echo "Release ready: âœ…"
    
    - name: Post-deployment validation
      run: |
        echo "âœ… Running production validation..."
        echo "This would run post-deployment health checks"

  # Cleanup
  cleanup:
    name: Cleanup
    if: always()
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, performance-tests, docker-tests, integration-tests, docs-build]
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "ðŸ§¹ Cleaning up temporary artifacts..."
        echo "This would clean up any temporary resources"